depth_multiple: 1.0  # model depth multiple
width_multiple: 1.0  # layer channel multiple

# YOLOv5 backbone
backbone:
  # [from, number, module, args]
  [[-1, 1, Conv, [64, 6, 2, 2, "kwargs(act_func=nn.ReLU)"]],  # 0-P1/2
   [-1, 1, Conv, [128, 3, 2, "kwargs(act_func=nn.ReLU)"]],  # 1-P2/4
   [-1, 3, C3, [128, "kwargs(act_func=nn.ReLU)"]],
   [-1, 1, Conv, [256, 3, 2, "kwargs(act_func=nn.ReLU)"]],  # 3-P3/8
   [-1, 6, C3, [256, "kwargs(act_func=nn.ReLU)"]],
   [-1, 1, Conv, [512, 3, 2, "kwargs(act_func=nn.ReLU)"]],  # 5-P4/16
   [-1, 9, C3, [512, "kwargs(act_func=nn.ReLU)"]],
   [-1, 1, Conv, [1024, 3, 2, "kwargs(act_func=nn.ReLU)"]],  # 7-P5/32
   [-1, 3, C3, [1024, "kwargs(act_func=nn.ReLU)"]],
   [-1, 1, SPPF, [1024, 5, "kwargs(act_func=nn.ReLU)"]],  # 9
  ]

# SparseInst head
head:
  [[-1, 1, ConvN, [256, 1, 1, "kwargs(init_func=caffe2_xavier_init)"]], # 10 / x
   [-1, 1, ConvN, [256, 3, 1]], # 11 / x
   [-1, 1, nn.Upsample, [None, 2, 'nearest']], # 12
   [11, 1, nn.Upsample, [None, 4, 'nearest']], # 13

   [6, 1, ConvN, [256, 1, 1, "kwargs(init_func=caffe2_xavier_init)"]], # 14 / x
   [[-1, 12], 1, Sum, [1]],  # 15
   [-1, 1, ConvN, [256, 3, 1, "kwargs(init_func=caffe2_xavier_init)"]], # 16 / x
   [-1, 1, nn.Upsample, [None, 2, 'nearest']], # 17

   [4, 1, ConvN, [256, 1, 1, "kwargs(init_func=caffe2_xavier_init)"]], # 18 / x
   [[-1, 17], 1, Sum, [1]],  # 19
   [-1, 1, ConvN, [256, 3, 1, "kwargs(init_func=caffe2_xavier_init)"]], # 20 / x

   [[-1, 17, 13], 1, Concat, [1]], # 21
   [-1, 1, ConvN, [256, 3, 1, "kwargs(init_func=caffe2_msra_init)"]], # 22 / m fusion
   # sparse decoder
   # inst branch
   [-1, 1, Coordinates, [absolute]], # 23
   [-1, 1, InstConv, [256, 4, 3, 1, 1, "kwargs(init_func=caffe2_msra_init, act_func=nn.ReLU, inplace=True)"]], # 24 / m
   # mask branch
   [23, 1, InstConv, [256, 4, 3, 1, 1, "kwargs(init_func=caffe2_msra_init, act_func=nn.ReLU, inplace=True)"]], # 25 / m
   [-1, 1, ConvN, [128, 1, 1]], # 26 / m
  ]

detect:
  [[[-1, 24], 1, SparseInstDetect, []]] # Detect(P3, P4, P5)